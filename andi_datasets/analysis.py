# AUTOGENERATED! DO NOT EDIT! File to edit: source_nbs/analysis.ipynb (unless otherwise specified).

__all__ = ['get_angle', 'dataset_angles', 'msd_analysis', 'ch_analysis']

# Cell
import numpy as np
import math

# Cell
def get_angle(a, b, c):
    ang = math.degrees(math.atan2(c[1]-b[1], c[0]-b[0]) - math.atan2(a[1]-b[1], a[0]-b[0]))
    return ang + 360 if ang < 0 else ang

def dataset_angles(trajs):
    angles = []
    for traj in trajs:
        for a, b, c in zip(traj[:, :-2].transpose(), traj[:, 1:-1].transpose(), traj[:, 2:].transpose()):
            angles.append(get_angle(a, b, c))
    return angles

# Cell
class msd_analysis():
    def __init__(self):
        ''' Constructor of the class'''


    def tamsd(self, traj, t_lags):
        '''
        Calculates the time average mean squared displacement of a trajecotry traj
        at various time lags
        Inputs: - traj: trajectory to calculate TA-MSD
                - t_lags: time lags used for the TA-MSD
        Outputs: - TA-MSD
        '''
        tamsd = np.zeros_like(t_lags, dtype= float)
        for idx, t in enumerate(t_lags):
            for p in range(len(traj)-t):
                tamsd[idx] += (traj[p]-traj[p+t])**2
            tamsd[idx] /= len(traj)-t
        return tamsd

    def get_diff_coeff(self, traj, t_lags = None):
        '''Calculates the diffusion coefficient of a trajectory by means of the linear
        fitting of the TA-MSD'''
        if not t_lags:
            N_t_lags = max(4, int(len(traj)*0.1))
            t_lags = np.arange(1, N_t_lags)

        tasmd = self.tamsd(traj, t_lags)
        return np.polyfit(t_lags, tasmd, deg = 1)[0]/2

    def get_exponent(self, traj, t_lags = None):
        '''Calculates the anolaous of a trajectory by means of the linear
        fitting of the logarithm of the TA-MSD'''
        if not t_lags:
            N_t_lags = max(4, int(len(traj)*0.1))
            t_lags = np.arange(1, N_t_lags)

        tasmd = self.tamsd(traj, t_lags)
        return np.polyfit(np.log(t_lags), np.log(tasmd), deg = 1)[0]



# Cell
from scipy.spatial import ConvexHull

class ch_analysis():

    def get_changepoints(trajs, tau = 10, metric = 'volume'):
        CPs = []
        for traj in trajs:
            traj = np.array(traj)

            Sd = np.zeros(traj.shape[0]-2*tau)
            for k in range(traj.shape[0]-2*tau):
                if metric == 'volume':
                    Sd[k] = ConvexHull(traj[k:(k+2*tau)]).volume
                elif metric == 'area':
                    Sd[k] = ConvexHull(traj[k:(k+2*tau)]).area

            below_mean = Sd < Sd.mean()
            cp_traj = np.argwhere(below_mean[1:] != below_mean[:-1])+1
            CPs.append(cp_traj+tau)

        return CPs